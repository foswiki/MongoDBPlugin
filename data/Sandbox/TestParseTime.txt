this allows me to test the code in =templates/mongodb_tmpl= that is imported into mongodd for use in queries

<script>

/*
=begin TML

---++ StaticMethod parseTime( szDate, defaultLocal ) -> $iSecs

Convert string date/time string to seconds since epoch (1970-01-01T00:00:00Z).
   * =sDate= - date/time string

Handles the following formats:

Default Foswiki format
   * 31 Dec 2001 - 23:59
   * 31-Dec-2001 - 23:59

Foswiki format without time (defaults to 00:00)
   * 31 Dec 2001
   * 31-Dec-2001

Date separated by '/', '.' or '-', time with '.' or ':'
Date and time separated by ' ', '.' and/or '-'
   * 2001/12/31 23:59:59
   * 2001.12.31.23.59.59
   * 2001/12/31 23:59
   * 2001.12.31.23.59
   * 2001-12-31 23:59
   * 2001-12-31 - 23:59
   * 2009-1-12
   * 2009-1
   * 2009

ISO format
   * 2001-12-31T23:59:59
   * 2001-12-31T

ISO dates may have a timezone specifier, either Z or a signed difference
in hh:mm format. For example:
   * 2001-12-31T23:59:59+01:00
   * 2001-12-31T23:59Z
The default timezone is Z, unless defaultLocal is true in which case
the local timezone will be assumed.

If the date format was not recognised, will return null.

=cut
*/
//START_foswiki_d2n_
var foswiki_d2n = function(dateString) {
    var parseTime = function(date, defaultLocal) {

        // ala Time::Local::timegm()
        var perlOrderDateInit = function(sec, min, hour, day, month, year) {
            var milliseconds = 0;

            //console.log("---- year "+year);
            //console.log("---- month "+(month+1));
            //console.log("---- day "+day);
            //console.log("---- hour "+hour);
            //console.log("---- min "+min);
            //console.log("---- sec "+sec);
            return new Date(year, month, day, hour, min, sec, milliseconds);
        }

        var defined = function(val) {
            return (val != undefined);
        }

        // Constants
        var ISOMONTH = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

        var MONTHLENS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

        var WEEKDAY = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

        var MON2NUM = {
            jan: 0,
            feb: 1,
            mar: 2,
            apr: 3,
            may: 4,
            jun: 5,
            jul: 6,
            aug: 7,
            sep: 8,
            oct: 9,
            nov: 10,
            dec: 11
        };
        var _daysInYear = function(year) {
            if (! (year % 400)) {
                return 366;
            }
            if (! (year % 100)) {
                return 365;
            }
            if (! (year % 4)) {
                return 366;
            }
            return 365;
        }

        date.replace(/^\s*/, ''); //remove leading spaces without de-tainting.
        date.replace(/\s*$/, '');

        //require Time::Local;
        // NOTE: This routine *will break* if input is not one of below formats!
        var tzadj = 0; // Zulu
        if (defaultLocal) {
            // Local time at midnight on the epoch gives us minus the
            // local difference. e.g. CST is GMT + 1, so midnight Jan 1 1970 CST
            // is -01:00Z. But we don't want to give you that! Because it's
            // wrong on Winblows, where localtime() of a negative number gives
            // undef, resulting in a mad tzadj. So we simply offset the
            // base by 24 hours (86400 seconds). The params are simply the
            // result of gmtime(86400);
            /////tzadj = 86400 - Time::Local::timelocal(0, 0, 0, 2, 0, 70, 5, 1, 0);
        }

        // try "31 Dec 2001 - 23:59"  (Foswiki date)
        // or "31 Dec 2001"
        //TODO: allow /.: too
        var foswikiDate = new RegExp(/(\d+)[-\s]+([a-z]{3})[-\s]+(\d+)(?:[-\s]+(\d+):(\d+))?/i);
        var mymatch = foswikiDate.exec(date);
        if (mymatch != undefined) {
            //    if ( date =~ /(\d+)[-\s]+([a-z]{3})[-\s]+(\d+)(?:[-\s]+(\d+):(\d+))?/i ) {
            var year = parseInt(mymatch[3]);

            //TODO: %MON2NUM needs to be updated to use i8n
            //TODO: and should really work for long form of the month name too.
            return perlOrderDateInit(0, parseInt(mymatch[5]) || 0, parseInt(mymatch[4]) || 0, parseInt(mymatch[1]), MON2NUM[mymatch[2].toLowerCase()], year); // - tzadj;
        }

        // ISO date 2001-12-31T23:59:59+01:00
        // Sven is going to presume that _all_ ISO dated must have a 'T' in them.
        var isoDate = new RegExp(/(\d\d\d\d)(?:-(\d\d)(?:-(\d\d))?)?(?:T(\d\d)(?::(\d\d)(?::(\d\d(?:\.\d+)?))?)?)?(Z|[-+]\d\d(?::\d\d)?)?/);
        mymatch = isoDate.exec(date);
        if ((date.match(/T/)) && (mymatch != undefined)
        //        && ( date =~
        // /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d))?)?(?:T(\d\d)(?::(\d\d)(?::(\d\d(?:\.\d+)?))?)?)?(Z|[-+]\d\d(?::\d\d)?)?/
        //        )
        ) {
            //var ( Y, M, D, h, M, s, tz ) =
            //  ( mymatch[1], mymatch[2] || 1, mymatch[3] || 1, mymatch[4] || 0, mymatch[5] || 0, mymatch[6] || 0, mymatch[7] || '' );
            var Y = parseInt(mymatch[1]);
            var M = parseInt(mymatch[2]) || 1;
            var D = parseInt(mymatch[3]) || 1;
            var h = parseInt(mymatch[4]) || 0;
            var m = parseInt(mymatch[5]) || 0;
            var s = parseInt(mymatch[6]) || 0;
            var tz = parseInt(mymatch[7]) || '';

            M--;
            if (tz == 'Z') {
                tzadj = 0; // Zulu
            }
            else {
                var tzRegExp = new RegExp(/([-+])(\d\d)(?::(\d\d))?/);
                mymatch = tzRegExp.exec(tz);
                if (mymatch != undefined) {
                    //if ( tz =~ /([-+])(\d\d)(?::(\d\d))?/ ) {
                    tzadj = (mymatch[1] || '') + (((parseInt(mymatch[2]) * 60) + (parseInt(mymatch[3]) || 0)) * 60);
                    tzadj -= 0;
                }
            }
            return perlOrderDateInit(s, m, h, D, M, Y); // - tzadj;
        }

        //any date that leads with a year (2 digit years too)
        //        date =~ m|^(\d\d+)(?:\s*[/\s.-]\s*(\d\d?)(?:\s*[/\s.-]\s*(\d\d?)(?:\s*[/\s.-]\s*(\d\d?)(?:\s*[:.]\s*(\d\d?)(?:\s*[:.]\s*(\d\d?))?)?)?)?)?$|x
        var YYYYMMdddRegExp = new RegExp(/^(\d\d+)(?:\s*[/\s.-]\s*(\d\d?)(?:\s*[/\s.-]\s*(\d\d?)(?:\s*[/\s.-]\s*(\d\d?)(?:\s*[:.]\s*(\d\d?)(?:\s*[:.]\s*(\d\d?))?)?)?)?)?$/);
        mymatch = YYYYMMdddRegExp.exec(date)
        if (mymatch != undefined) {

            //no defaulting yet so we can detect the 2009--12 error
            //var ( year, M, D, h, M, s ) = ( mymatch[1], mymatch[2], mymatch[3], mymatch[4], mymatch[5], mymatch[6] );
            var year = parseInt(mymatch[1]);
            var M = parseInt(mymatch[2]);
            var D = parseInt(mymatch[3]);
            var h = parseInt(mymatch[4]);
            var m = parseInt(mymatch[5]);
            var s = parseInt(mymatch[6]);
            var tz = parseInt(mymatch[7]);

            //console.log('*****('+mymatch[1]+' , '+mymatch[2]);
            //console.log('=====('+parseInt(mymatch[1])+' , '+parseInt(mymatch[2]));
            //console.log('=====('+year+' , '+M);
            //without range checking on the 12 Jan 2009 case above, there is abmiguity - what is 14 Jan 12 ?
            //similarly, how would you decide what Jan 02 and 02 Jan are?
            //month_p = MON2NUM{ lc(month_p) } if (defined(MON2NUM{ lc(month_p) }));
            //range checks
            if (defined(M) && (M < 1 || M > 12)) {
                return null;
            }
            var month = (M || 1) - 1;
            var monthlength = MONTHLENS[month];

            // If leap year, note February is month number 1 starting from 0
            if (month == 1 && _daysInYear(year) == 366) {
                monthlength = 29;
            }
            if (defined(D) && (D < 0 || D > monthlength)) {
                return null;
            }
            if (defined(h) && (h < 0 || h > 24)) {
                return null;
            }
            if (defined(M) && (M < 0 || M > 60)) {
                return null;
            }
            if (defined(s) && (s < 0 || s > 60)) {
                return null;
            }

            var day = D || 1;
            var hour = h || 0;
            var min = m || 0;
            var sec = s || 0;

            return perlOrderDateInit(sec, min, hour, day, month, year); //- tzadj;
        }

        // try the js built in parser
        return new Date(date);
    }
    var parsedDate = parseTime(dateString);
    if (parsedDate == null) {
        return 0;
    }
    return parsedDate.getTime(); //return seconds since 1970
}
//END_foswiki_d2n_

//////////////////////////////////////////////////////////////////////
//tests
/* Returns the class of the argument or undefined if it's not a valid JavaScript
   object.
*/
function getObjectClass(obj) {
    if (obj && obj.constructor && obj.constructor.toString) {
        var arr = obj.constructor.toString().match(/function\s*(\w+)/);
        return arr && arr.length == 2 ? arr[1] : undefined;
    }
    else {
        return undefined;
    }
}


var ok = 0;
var broken = 0;
var assert_equals = function(expected, actual, msg) {

    var expVal;
    if (getObjectClass(expected) == 'Date') {
        expVal = expected.getTime();
    }
    var actVal;
    if (getObjectClass(actual) == 'Date') {
        actVal = actual.getTime();
    }

    if (((getObjectClass(expected) == 'Date') && (getObjectClass(actual) == 'Date')) && (expected.getTime() == actual.getTime())) {
        ok++;
        console.log(ok + ' (' + expVal + ' , ' + actVal + ') ' + ": OKOKOK " + getObjectClass(expected));
    } else {
        broken++;
        console.log(broken + ' (' + expVal + ' , ' + actVal + ') ' + ": " + msg);
    }
}

var checkTime = function(seconds, minutes, hours, day, month, year, string, tzoffset) {

    //    Y -= 1900;
    //    M--;
    var milliseconds = 0;
    var gmt = new Date(year, month - 1, day, hours, minutes, seconds, milliseconds);
    //    var tt = new Date( string, tzoffset );
    //console.log('               parsing: '+string);
    var parsedSeconds = d2n(string);
    var tt = new Date(parsedSeconds);
    var a = tt.toDateString();
    var b = gmt.toDateString();
    assert_equals(gmt, tt, gmt + " != " + tt + " | toDateString | " + seconds + "," + minutes + "," + hours + "," + day + "," + month + "," + year + ",** " + string + " **," + tzoffset);
}

//var test_parseTimeFoswiki = function() {
checkTime(0, 1, 18, 10, 12, 2001, "10 Dec 2001 - 18:01");
checkTime(0, 0, 0, 10, 12, 2001, "10 Dec 2001");

checkTime(0, 1, 18, 10, 12, 2001, "10-Dec-2001 - 18:01");
checkTime(0, 0, 0, 10, 12, 2001, "10-Dec-2001");
//}
//var test_parseTimeRCS = function() {
checkTime(2, 1, 18, 2, 12, 2001, "2001/12/2 18:01:02");
checkTime(3, 2, 1, 2, 12, 2001, "2001.12.2.01.02.03");
checkTime(0, 59, 21, 2, 12, 2001, "2001/12/2 21:59");
checkTime(0, 59, 21, 2, 12, 2001, "2001-12-02 21:59");
checkTime(0, 59, 21, 2, 12, 2001, "2001-12-02 - 21:59");
checkTime(0, 59, 21, 2, 12, 2001, "2001-12-02.21:59");
checkTime(0, 59, 23, 2, 12, 1976, "1976.12.2.23.59");
checkTime(2, 1, 18, 2, 12, 2001, "2001-12-02 18:01:02");
checkTime(2, 1, 18, 2, 12, 2001, "2001-12-02 - 18:01:02");
checkTime(2, 1, 18, 2, 12, 2001, "2001-12-02-18:01:02");
checkTime(2, 1, 18, 2, 12, 2001, "2001-12-02.18:01:02");
//}
//var test_parseTimeISO8601 = function() {
checkTime(0, 0, 0, 4, 2, 1995, "1995-02-04");
checkTime(0, 0, 0, 1, 2, 1995, "1995-02");
checkTime(0, 0, 0, 1, 1, 1995, "1995");
checkTime(7, 59, 20, 3, 7, 1995, "1995-07-03T20:59:07");
checkTime(0, 59, 23, 3, 7, 1995, "1995-07-03T23:59");
checkTime(0, 0, 23, 2, 7, 1995, "1995-07-02T23");
//    checkTime( 7, 59, 5,  2, 7, 1995, "1995-07-02T06:59:07+01:00" );
//    checkTime( 7, 59, 5,  2, 7, 1995, "1995-07-02T06:59:07+01" );
checkTime(7, 59, 6, 2, 7, 1995, "1995-07-02T06:59:07Z");

/*    if ( ^O == 'MSWin32' ) {
        ENV{TZ} = 'GMT-1';
    }
    else {
        ENV{TZ} = 'Europe/Paris';
    }
    POSIX::tzset();

    # Generate server time string
    checkTime( 7, 59, 5, 2, 4, 1995, "1995-04-02T06:59:07",  1 );
    checkTime( 7, 59, 6, 2, 4, 1995, "1995-04-02T06:59:07Z", 1 );
*/
//}
/*
var test_parseTimeLocal = function() {
    
    if ( ^O == 'MSWin32' ) {
        ENV{TZ} = 'GMT-10';
    }
    else {
        ENV{TZ} = 'Australia/Lindeman';
    }
    POSIX::tzset();
    undef Foswiki::Time::TZSTRING;
    checkTime( 13, 9, 16, 7, 11, 2006, "2006-11-08T02:09:13", 1 );

    # Ensure TZ specifier in string overrides parameter
    checkTime( 46, 25, 14, 7, 11, 2006, "2006-11-07T14:25:46Z", 1 );
}

var test_generateIsoOffset = function() {

    # Nepal has a wierd TZ difference; handy
    if ( ^O == 'MSWin32' ) {
        ENV{TZ} = 'GMT-5:45';
    }
    else {
        ENV{TZ} = 'Asia/Katmandu';    # GMT+05:45
    }
    POSIX::tzset();
    undef Foswiki::Time::TZSTRING;
    var tt = Foswiki::Time::parseTime('2009-02-07T10:22+05:45');

    # Should be 04:37 GMT
    var ( sec, min, hour, mday, mon, year, wday, yday, isdst ) =
      gmtime(tt);
    assert_equals( 4,  hour );
    assert_equals( 37, min );

    # Generate server time string
    assert_str_equals( '2009-02-07T10:22:00+05:45',
        Foswiki::Time::formatTime( tt, 'iso', 'servertime' ) );
    tt = Foswiki::Time::parseTime('2009-02-07T00:00Z');
    assert_str_equals( '2009-02-07T05:45:00+05:45',
        Foswiki::Time::formatTime( tt, 'iso', 'servertime' ) );
}
*/
console.log(broken + " failed, " + ok + " ok - out of: " + (broken + ok));

</script>