%META:TOPICPARENT{name="Plugins"}%
---+!! !%TOPIC%
<!--
One line description, required for extensions repository catalog.
BuildContrib will fill in the SHORTDESCRIPTION with the value of
$SHORTDESCRIPTION from the .pm module, or you can redefine it here if you
prefer.
   * Set SHORTDESCRIPTION = %$SHORTDESCRIPTION%
-->
%SHORTDESCRIPTION%

%TOC%

---++ Usage
This is an experimental attempt to utilise [[http://mongodb.org][MongoDB]] to cache and search/query all topics stored in Foswiki. This is achieved by:
   * Bulk-loading topics for the first time with the =%TOPIC%/update= restHandler (see below)
   * Maintaining any new or changed topics by way of a [[%SCRIPTURLPATH{"configure"}%/configure#Store][Store]] listener (={Store}{Listeners}= expert setting in configure)
   * Executing all searches and queries with !MongoDB instead of the traditional !BruteForce/grep approach by providing new search and query algorithms (={Store}{SearchAlgorithm}=, ={Store}{QueryAlgorithm}= in configure)

To check on progress and bugs please visit Foswikitask:%TOPIC%.

#LoadBrowser
---+++ Loading from web browser
%TOPIC% registers some rest handlers which may be accessed via web browser:
   * %SCRIPTURL{rest}%/%TOPIC%/update?updateweb=%USERSWEB% (just the %USERSWEB% web)
   * %SCRIPTURL{rest}%/%TOPIC%/update?updateweb=all (all webs recursivly)
   * %SCRIPTURL{rest}%/%TOPIC%/update?updateweb=all;revision=off (all webs recursivly, but only import the last revision of each topic)
   * %SCRIPTURL{rest}%/%TOPIC%/update?updateweb=Lauries;recurse=on (Lauries web and its subwebs recursivly)
   * %SCRIPTURL{rest}%/%TOPIC%/updateDatabase (updates server-side javascript code stored in !MongoDB)

#LoadCLI
---+++ Loading from command line
It may be unreasonable to run the above scripts via web browser if you have any non-trivial amount of data, so on a
production system it's best to invoke the rest script from the command line where the process won't be affected by
timemouts and webserver restarts. The following examples assume:
   * Your web server user is =www-data= (default on Debian systems)
   * The path to the root of your Foswiki installation is =/path/to/foswiki=

%JQREQUIRE{"chili"}%<verbatim class="bash">cd /path/to/foswiki/bin
sudo -u www-data ./rest /MongoDBPlugin/update -updateweb Sandbox</verbatim>

If this is working and you're ready to load your entire Foswiki, it's best to run in the background detached from your terminal session as follows:
<verbatim class="bash">cd /path/to/foswiki/bin
sudo -u www-data nohup ./rest /MongoDBPlugin/update -updateweb all -recurse on &</verbatim>

You can keep an eye on the progress of the load by looking at the =nohup.out= file which will be created in =/path/to/foswiki= (with =tail -f nohup.out=, for example).

Because every version of every topic is loaded, loading a large wiki can be __very slow__. On an installation using separate virtual machines for Foswiki and !MongoDB, with 205,000 topics - most of which only have 1 or 2 revisions, this process takes ~1-6 hours (depending on host equipment utilisation).

---++ Technical details

---+++ Caveats
   1 Sorting works for fields that are strings, but doesn't yet manage to autoconvert to numerical sorting if all fields happen to contain only numerical characters.
   2 Sorting _is_ different, Foswiki magically orders numerically if all the hits happen to be numeric, whereas Mongo treats strings as strings.
   3 Your topics (as stored internally in the Meta obj) must be smaller than <del>4M</del> <ins>16M</ins> (!MongoDB 1.8).
   4 The schema is likely to change regularly, so when upgrading, re-importing will probably be necessary
   5 Works __only__ with foswik trunk - to be 1.2 or 2.0 - will _not_ work with foswiki 1.1
   6 The %SYSTEMWEB%.QuerySearch ==~= operator is currently not hoisted to a regex, so is un-necessarily slow (both with and without mongodb) - %GREEN%TODO: Check if this is still true%ENDCOLOR%
   7 Web order appears to not have been implemented in the general store? So Mongo has to do it somewhere (unit tests have wrong order)
   1 Unsupported System.QuerySearch expressions:
      * =IN= operator
      * =versions= queries
   1 Slow queries:
      * Any query involving the ==~= (regex) or =~= (like) operators won't be much faster than grep. That's because such queries cannot be resolved using indexes (so it has to do a bruteforce scan).
   1 Topic history and large !MongoDB database sizes - !MongoDB does a couple of things that make its storage requirements quite a lot more demanding than traditional =.txt= & =.txt,v= files:
      * Each topic-document in !MongoDB contains an atomised (queryable) version of the topic and its metadata, but there is also a legacy =_raw_text= field which is a (utf8) character-for-character copy of what you'd see with =?raw=debug=. This is to support legacy scope="text" and regexes searches.
      * More importantly, %TOPIC% also stores every _version_ of every topic without compression. As a point of comparison, TRIN Wiki's 2.5GB =data/= directory translates to ~12GB in !MongoDB.
   1 Sizing and memory requirements:
      * Despite having a ~12GB !MongoDB, the working set size (amount of physical RAM required) on TRIN Wiki is typically 2-3GB, so a 4GB VM (separate to the VM running Foswiki) does quite well. Use the [[http://www.mongodb.org/display/DOCS/mongostat][mongostat]] command for detailed performance profiling.
   1 Manually hacked =.txt= files:
      * Every time you modify a =.txt= file on the filesystem, you need to ask mongo to reload that web. TODO: make the rest handler update an individual topic, rather than the whole web.
      * Deleting a =.txt,v= is NOT a reliable way of deleting history, and in fact can cause problems getting subsequent versions recognised, because %TOPIC% essentially still has a cache of the =.txt,v= in its database. So you have to drop the database of the web where you've deleted any =,v= files, and re-load. Dropping a database works like this (using the mongo shell): <verbatim class="bash"> show dbs
 use foswiki__My__SubWeb
 show collections // verify you're on a database that really exists. Yes, you can use a db that doesn't exist...
 db.dropDatabase()</verbatim>
   1 Stability problems with !MongoDB 1.8.0, 1.8.1 and possibly future 1.8.x versions:
      * It seems !MongoDB 1.8.x's use of the Mozilla spidermonkey javascript engine (constrained to just 8MB memory), or perhaps %TOPIC%'s javascript code has a memory leak problem wich was causing the TRIN Wiki installation to behave erratically after 24-48hrs uptime. Restarting mongodb and apache each time seemd to solve the problem. This problem no longer occurs after switching to the development version of !MongoDB (1.9.x series) - see Foswikitask:Item10672, [[https://jira.mongodb.org/browse/SERVER-3131][SERVER-3131]], [[https://jira.mongodb.org/browse/SERVER-3016][SERVER-3016]] and [[https://jira.mongodb.org/browse/SERVER-3012][SERVER-3012]].

---+++ Metrics
---++++ HTTP reposnse header =X-Foswiki-Monitor-%TOPIC%-lastQueryTime=
You can use 
=curl -I %SCRIPTURL{view}%/Lauries/TestQuery1= to get just the header info (foswiki goes through and does a complete render for =HEAD= requests atm.

In combination with Foswiki::Extensions.DebugLogPlugin, you will then be able to see both the time taken to render the topic =X-Foswiki-Monitor-DebugLogPlugin-Rendertime= and the time 
the last MongoDB query tool =X-Foswiki-Monitor-%TOPIC%-lastQueryTimee=.

#InstallingMongoDB
---++ Installing and configuring !MongoDB
Installing and configuring !MongoDB isn't too hard as far as database products go, but it's worth noting some tips here:
   * Currently %TOPIC% schema uses a separate database for each Foswiki web and subweb. By default, the minimum overhead for a !MongoDB database is 200MB. If you have a lot of webs, and most of them don't have thousands of topics in them, then this overhead is a little extreme. 
      %JQREQUIRE{"chili"}%Place these configuration directives in your =mongodb.conf=: <verbatim>
 noprealloc = true
 smallfiles = true</verbatim>
      This will make the minimum cost of each new web only 16MB (8MB NS and 8MB data). Alternatively you could change your upstart/init scripts to add the following options to the =mongod= startup:
 <verbatim class="bash">--noprealloc --smallfiles</verbatim>
   * For Debian-based distros, you really should use the [[http://www.mongodb.org/display/DOCS/Ubuntu+and+Debian+packages][10gen packages]]
   * In terms of configuring the database options, %TOPIC%'s default configuration should "just work" with an out-of-the-box !MongoDB installation if it's done on the same server as Foswiki (localhost)
   * In production, running !MongoDB on a different server can free up the Foswiki server to handle more requests
   * We don't quite have =slave_ok= working yet (this is where we distribute queries across a bunch of replicas), so don't expect any performance increase if you set up a replSet
   * Due to liberal usage of =db.eval= (executing javascript in !MongoDB) to resolve some parts of the %SYSTEMWEB%.QuerySearch language (for example, ref queries), sharding is definitely not supported

---++ Installing the !MongoDB perl driver
If your operating system does not have a package for it, a command such as <verbatim class="bash">sudo cpan MongoDB</verbatim> should work.

If you use a Debian operating system, you can build yourself a deb for the !MongoDB perl driver (requires =dh-make-perl=):
<verbatim class="bash">sudo apt-get install libany-moose-perl libmoose-perl libclass-method-modifiers-perl libdata-types-perl libdatetime-perl libfile-slurp-perl libjson-perl libjson-xs-perl libjson-any-perl libtest-exception-perl libtry-tiny-perl libboolean-perl 
sudo apt-get install dh-make-perl
sudo cpan2deb MongoDB 
sudo dpkg -i libmongodb*</verbatim>

---++ Installation Instructions

%$INSTALL_INSTRUCTIONS%

After [[#InstallingMongoDB][installing MongoDB]] and [[#LoadBrowser][loading your data]] you will also need to use [[%SCRIPTURLPATH{"configure"}%][configure]] to:
   * Access the [[%SCRIPTURLPATH{"configure"}%#Store][Store]] tab
   * Change ={Store}{SearchAlgorithm}= to use =Foswiki::Store::SearchAlgorithms::MongoDB=
   * Change ={Store}{QueryAlgorithm}= to use =Foswiki::Store::QueryAlgorithms::MongoDB=
   * Show expert settings
   * Enter the following text in the ={Store}{Listeners}= setting:
   <verbatim> {
   'Foswiki::Plugins::MongoDBPlugin::Listener' => 1
 }</verbatim>

If you are using a replica set, don't forget to list all replSet members in the =[[%SCRIPTURLPATH{"configure"}%#MongoDBPlugin$Extensions][{MongoDBPlugin}{host}]]= setting, for example:
<verbatim>mongodb://mongo1.example.org:27017,mongo2.example.org:27017,mongo3.example.org:27017</verbatim>

---++ Info

Many thanks to the following sponsors for supporting this work:
   * [[http://fosiki.com][fosiki - Sven Dowideit's Wiki Consulting]]
   * [[http://www.taxonomy.org.au][TRIN]], The Taxonomy Research & Information Network with the [[http://www.anbg.gov.au/cpbr/][Centre for Australian National Biodiversity Research]]

|  Author(s): | Foswiki:Main.SvenDowideit |
|  Copyright: | &copy; 2010-2011 SvenDowideit@fosiki.com |
|  License: | [[http://www.gnu.org/licenses/gpl.html][GPL 3 (Gnu General Public License)]] |
|  Release: | %$RELEASE% |
|  Version: | %$VERSION% |
|  Change History: | <!-- versions below in reverse order -->&nbsp; |
|  7 Apr 2011:  | milestone 3 - pretty much full functionality |
|  Sept 2010: | restart work using foswiki 1.1 |
|  Feb 2010: | initial implementation spike |
|  Dependencies: | %$DEPENDENCIES% |
|  Home page: | http://foswiki.org/bin/view/Extensions/%TOPIC% |
|  Support: | http://foswiki.org/bin/view/Support/%TOPIC% |

<!-- Do _not_ attempt to edit this topic; it is auto-generated. -->
